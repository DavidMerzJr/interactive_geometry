#!/usr/bin/env python

"""
Copyright 2019 Matthew Powelson

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


'''
TODO:
    Clean:
        Make updating ellipse more efficient, scale vertices instead of regenerating
        break out parameters to be more general
        scale interactive marker based on size of ellipse
        Clean imports (np where not needed, etc)

    Future:
        Explore making the triangle mesh marker the center of the 6 dof one instead of a box
        interactive_marker_utils process_feedback is specific to the ellipsoid.


'''
import rospy
from rospy.numpy_msg import numpy_msg
from shape_msgs.msg import Mesh
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point
from std_msgs.msg import ColorRGBA

from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import InteractiveMarkerControl
import copy
from tf.broadcaster import TransformBroadcaster
from tf.listener import TransformListener
import tf

import numpy as np
from stl import mesh

from interactive_geometry.ellipsoid_generator import *
from interactive_geometry.mesh_exporter import *
from interactive_geometry.utils import *
from interactive_geometry.interactive_marker_utils import  InteractiveMarkerUtils
import interactive_geometry.global_vars as global_vars


menu_handler = MenuHandler()



if __name__ == '__main__':
    # Initialize node, publishers, and interactive marker server
    rospy.init_node('interactive_ellipsoid_node', anonymous=True)
    pub_marker = rospy.Publisher('mesh_marker', Marker, queue_size=10)

    # Read ROS paramters
    global_vars.a_scale = rospy.get_param('~a')
    global_vars.b_scale = rospy.get_param('~b')
    global_vars.c_scale = rospy.get_param('~c')
    filename = rospy.get_param('~filename')

    # Set up things
    server = InteractiveMarkerServer("basic_controls")
    broadcaster = TransformBroadcaster()
    listener = TransformListener()
    util = InteractiveMarkerUtils(server, broadcaster, pub_marker)
    exporter = MeshExporter()

    # Make central control to move mesh
    position = Point(0, 0, 0)
    util.make6DofMarker(False, InteractiveMarkerControl.MOVE_3D, position, True)
    server.applyChanges()

    # Make controls to resize mesh (positive direction)
    position = Point(global_vars.a_scale, 0,  0)
    util.makeMovingMarker( position, "a", axis=0)
    position = Point(0, global_vars.b_scale,  0)
    util.makeMovingMarker( position, "b", axis=1)
    position = Point(0, 0, global_vars.c_scale)
    util.makeMovingMarker( position, "c", axis=2)

    # Make controls to resize mesh (negative directon)
    position = Point(-1*global_vars.a_scale, 0,  0)
    util.makeMovingMarker( position, "a_neg", axis=0)
    position = Point(0, 0, -1*global_vars.c_scale)
    util.makeMovingMarker( position, "c_neg", axis=2)

    # 'commit' changes and send to all clients
    server.applyChanges()

    # Setup for loop
    broadcaster.sendTransform( (0, 0, 0), (0, 0, 0, 1.0), rospy.Time.now(), "base_link", "mesh_frame" )
    rate = rospy.Rate(1) # 10hz
    seq = 0
    while not rospy.is_shutdown():

        # Generate the ellipse
        gen = EllipsoidGenerator(global_vars.a_scale, global_vars.b_scale, global_vars.c_scale)
        gen.generate_ellipsoid()

        # Rebroadcast the tf
        try:
            (trans,rot) = listener.lookupTransform("base_link", "mesh_frame", rospy.Time(0))
            broadcaster.sendTransform( trans, rot, rospy.Time.now(), "mesh_frame", "base_link",)
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            broadcaster.sendTransform( (0, 0, 0), (0, 0, 0, 1.0), rospy.Time.now(),  "mesh_frame", "base_link" )
            print("Resetting TF")
            continue

        # Add/Update mesh
        marker = Marker()
        marker = to_triangle_marker_msg(gen.vertices, gen.faces, "mesh_frame", seq, rospy.Time.now())
        marker.header.stamp = rospy.Time.now()


        # Save mesh if button clicked
        if util.save_file == True:
            exporter.mesh_to_stl(gen.vertices, gen.faces, filename)
            util.save_file = False
            print("Exported mesh as " + filename)

        # Publish the mesh
        pub_marker.publish(marker)
        rate.sleep()



#    export = MeshExporter()
#    export.mesh_to_stl(gen.vertices, gen.faces, "output.stl")


