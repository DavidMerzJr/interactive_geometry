#!/usr/bin/env python

'''
Copyright [yyyy] [name of copyright owner]

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''
import rospy
from rospy.numpy_msg import numpy_msg
from shape_msgs.msg import Mesh
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point
from std_msgs.msg import ColorRGBA


import numpy as np
from stl import mesh

from interactive_geometry.ellipsoid_generator import *
from interactive_geometry.mesh_exporter import *
from interactive_geometry.utils import *



if __name__ == '__main__':
    pub = rospy.Publisher('mesh', Mesh, queue_size=1)
    pub_marker = rospy.Publisher('mesh_marker', Marker, queue_size=10)
    rospy.init_node('interactive_ellipsoid_node', anonymous=True)
    rate = rospy.Rate(1) # 10hz
    seq = 0
    while not rospy.is_shutdown():
        a = rospy.get_param('~a')
        b = rospy.get_param('~b')
        c = rospy.get_param('~c')

        gen = EllipsoidGenerator(a, b, c)
        gen.generate_ellipsoid()

        #mesh_msg = to_shape_msgs_mesh(gen.vertices, gen.faces)
        #pub.publish(mesh_msg)
        marker = Marker()
        marker = to_triangle_marker_msg(gen.vertices, gen.faces)

        #Fill header
        marker.header.frame_id = "world"
        marker.header.stamp = rospy.Time.now()
        marker.header.seq = seq
        seq += 1
        marker.ns = "interactive_geometry"
        marker.id = 0
        marker.type = Marker.TRIANGLE_LIST
        marker.action = Marker.ADD;
        marker.pose.position.x = 0;
        marker.pose.position.y = 0;
        marker.pose.position.z = 0;
        marker.pose.orientation.x = 0.0;
        marker.pose.orientation.y = 0.0;
        marker.pose.orientation.z = 0.0;
        marker.pose.orientation.w = 1.0;
        marker.scale.x = 1;
        marker.scale.y = 1;
        marker.scale.z = 1;
        marker.color.a = 1.0;
        marker.color.r = 1.0;
        marker.color.g = 1.0;
        marker.color.b = 1.0;
        #marker.lifetime = rospy.Duration(0)
        marker.lifetime = rospy.Time.now()
        marker.frame_locked = True



        pub_marker.publish(marker)
        print("published mesh")
        rate.sleep()



#    export = MeshExporter()
#    export.mesh_to_stl(gen.vertices, gen.faces, "output.stl")


