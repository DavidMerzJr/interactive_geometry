#!/usr/bin/env python

"""
Copyright 2019 Matthew Powelson

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""


'''
TODO:
    Future:
        Scale interactive marker based on size of ellipse
        Interactive_marker_utils process_feedback is specific to the ellipsoid.
        Add second layer of vertices scaled by some small amount to make it look nicer

Note:
    The stretching controls are in the mesh frame
    The 6 DOF control in in the parent frame
    When the 6 dof marker is moved, the mesh_link frame is updated to be on top of it.

'''

# Import ROS modules
import rospy
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point
from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import InteractiveMarkerControl
from tf.broadcaster import TransformBroadcaster
from tf.listener import TransformListener
import tf

# Import pure Python modules
import numpy as np
import rospkg
from scipy.spatial.transform import Rotation

# Import package modules
from interactive_geometry.ellipsoid_generator import *
from interactive_geometry.mesh_exporter import *
from interactive_geometry.utils import *
from interactive_geometry.interactive_marker_utils import  InteractiveMarkerUtils
import interactive_geometry.global_vars as global_vars


menu_handler = MenuHandler()

if __name__ == '__main__':
    # Initialize node, publishers, and interactive marker server
    rospy.init_node('interactive_ellipsoid_node', anonymous=True)
    pub_marker = rospy.Publisher('mesh_marker', Marker, queue_size=10)

    # Read ROS parameters
    global_vars.a_scale = rospy.get_param('~a', 1.0)
    global_vars.b_scale = rospy.get_param('~b', 1.0)
    global_vars.c_scale = rospy.get_param('~c', 1.0)
    rospack = rospkg.RosPack()
    filename = rospy.get_param('~filename', rospack.get_path('interactive_geometry') + '/output.stl')
    num_pts = rospy.get_param('~num_pts', 20)
    parent_link = rospy.get_param('~parent_link', 'world')
    mesh_link = rospy.get_param('~mesh_link', 'mesh_frame')

    # Set Marker server and TF
    server = InteractiveMarkerServer("basic_controls")
    broadcaster = TransformBroadcaster()
    listener = TransformListener()

    # Set up generation utilities
    util = InteractiveMarkerUtils(server, broadcaster, pub_marker)
    util.parent_link = parent_link
    util.mesh_link = mesh_link
    exporter = MeshExporter()

    # Make central control to move mesh
    position = Point(0, 0, 0)
    util.make6DofMarker(False, InteractiveMarkerControl.MOVE_3D, position, True)
    server.applyChanges()

    # Make controls to resize mesh (positive direction)
    position = Point(global_vars.a_scale, 0,  0)
    util.makeMovingMarker( position, "a", axis=0)
    position = Point(0, global_vars.b_scale,  0)
    util.makeMovingMarker( position, "b", axis=1)
    position = Point(0, 0, global_vars.c_scale)
    util.makeMovingMarker( position, "c", axis=2)

    # Make controls to resize mesh (negative directon)
    position = Point(-1*global_vars.a_scale, 0,  0)
    util.makeMovingMarker( position, "a_neg", axis=0)
    position = Point(0, 0, -1*global_vars.c_scale)
    util.makeMovingMarker( position, "c_neg", axis=2)

    # 'commit' changes and send to all clients
    server.applyChanges()

    # Generate the initial ellipsoid
    gen = EllipsoidGenerator(global_vars.a_scale, global_vars.b_scale, global_vars.c_scale, num_pts)
    gen.generate_ellipsoid()

    # Setup for loop
    trans = (0, 0, 0)
    rot = (0, 0, 0, 1.0)
    broadcaster.sendTransform( trans, rot, rospy.Time.now(), parent_link, mesh_link )
    rate = rospy.Rate(30) # 30hz
    seq = 0
    while not rospy.is_shutdown():

        # Update the ellipsoid
        gen.update_ellipsoid(global_vars.a_scale, global_vars.b_scale, global_vars.c_scale)

        # Rebroadcast the tf
        try:
            (trans,rot) = listener.lookupTransform(parent_link, mesh_link, rospy.Time(0))
            broadcaster.sendTransform( trans, rot, rospy.Time.now(), mesh_link, parent_link,)
        except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
            broadcaster.sendTransform( (0, 0, 0), (0, 0, 0, 1.0), rospy.Time.now(),  mesh_link, parent_link )
            print("Resetting TF")
            continue

        # Add/Update mesh
        marker = Marker()
        marker = to_triangle_marker_msg(gen.vertices, gen.faces, mesh_link, seq, rospy.Time.now())
        marker.header.stamp = rospy.Time.now()

        # Save mesh if button clicked
        if util.save_file == True:
            # Rotate the vertices
            rotation_matrix = Rotation.from_quat(rot)
            gen.vertices = (rotation_matrix.apply(gen.vertices))

            # Translate the vertices - the 1D vector is broadcast
            # across the matrix, added to every coordinate
            gen.vertices += np.array(trans)

            # Save to file
            exporter.mesh_to_stl(gen.vertices, gen.faces, filename)
            util.save_file = False
            print("Exported mesh as " + filename)
            break;

        # Publish the mesh
        pub_marker.publish(marker)
        rate.sleep()

