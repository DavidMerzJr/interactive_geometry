#!/usr/bin/env python

"""
Copyright 2019 Matthew Powelson

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

# Import ROS modules
import rospy
from visualization_msgs.msg import Marker
from geometry_msgs.msg import Point
from interactive_markers.interactive_marker_server import *
from interactive_markers.menu_handler import *
from visualization_msgs.msg import InteractiveMarkerControl
from tf.broadcaster import TransformBroadcaster
from tf.listener import TransformListener
import tf

# Import pure Python modules
import numpy as np
from scipy.spatial.transform import Rotation

# Import package modules
from interactive_geometry.ellipsoid_generator import *
from interactive_geometry.mesh_exporter import *
from interactive_geometry.utils import *
from interactive_geometry.interactive_marker_utils import  InteractiveMarkerUtils
import interactive_geometry.global_vars as global_vars

# Action interface
import actionlib
import interactive_geometry_msgs.msg

menu_handler = MenuHandler()


class EllipsoidAction(object):
    # create messages that are used to publish feedback/result
    _feedback = interactive_geometry_msgs.msg.InteractiveEllipsoidFeedback()
    _result = interactive_geometry_msgs.msg.InteractiveEllipsoidResult()

    def __init__(self, name):
        # Mesh publisher
        self._pub_marker = rospy.Publisher('mesh_marker', Marker, queue_size=10)

        # Set Marker server and TF
        self._server = InteractiveMarkerServer("basic_controls")
        self._broadcaster = TransformBroadcaster()
        self._listener = TransformListener()

        # Utilities class for manipulating interactive marker
        self._util = InteractiveMarkerUtils(self._server, self._broadcaster, self._pub_marker)

        # Setup action server
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, interactive_geometry_msgs.msg.InteractiveEllipsoidAction, execute_cb=self.execute_cb, auto_start = False)
        self._as.start()

    def execute_cb(self, goal):

        # Read ROS parameters
        global_vars.a_scale = rospy.get_param('~a', 1.0)
        global_vars.b_scale = rospy.get_param('~b', 1.0)
        global_vars.c_scale = rospy.get_param('~c', 1.0)

        # Read goal from action
        filename = goal.results_directory + '/output.stl'
        num_pts = goal.num_pts
        parent_link = goal.parent_link
        mesh_link = goal.mesh_link

        # Set up generation utilities
        self._util.parent_link = parent_link
        self._util.mesh_link = mesh_link
        exporter = MeshExporter()

        # Make central control to move mesh
        position = Point(0, 0, 0)
        self._util.make6DofMarker(False, InteractiveMarkerControl.MOVE_3D, position, True)
        self._server.applyChanges()

        # Make controls to resize mesh (positive direction)
        position = Point(global_vars.a_scale, 0,  0)
        self._util.makeMovingMarker( position, "a", axis=0)
        position = Point(0, global_vars.b_scale,  0)
        self._util.makeMovingMarker( position, "b", axis=1)
        position = Point(0, 0, global_vars.c_scale)
        self._util.makeMovingMarker( position, "c", axis=2)

        # Make controls to resize mesh (negative directon)
        position = Point(-1*global_vars.a_scale, 0,  0)
        self._util.makeMovingMarker( position, "a_neg", axis=0)
        position = Point(0, 0, -1*global_vars.c_scale)
        self._util.makeMovingMarker( position, "c_neg", axis=2)

        # 'commit' changes and send to all clients
        self._server.applyChanges()

        # Generate the initial ellipsoid
        gen = EllipsoidGenerator(global_vars.a_scale, global_vars.b_scale, global_vars.c_scale, num_pts)
        gen.generate_ellipsoid()

        # Setup for loop
        trans = (0, 0, 0)
        rot = (0, 0, 0, 1.0)
        self._broadcaster.sendTransform( trans, rot, rospy.Time.now(), parent_link, mesh_link )
        rate = rospy.Rate(30) # 30hz
        seq = 0
        finished = False
        print("HELLO")
        while not finished:

            # Update the ellipsoid
            gen.update_ellipsoid(global_vars.a_scale, global_vars.b_scale, global_vars.c_scale)

            # Rebroadcast the tf
            try:
                (trans,rot) = self._listener.lookupTransform(parent_link, mesh_link, rospy.Time(0))
                self._broadcaster.sendTransform( trans, rot, rospy.Time.now(), mesh_link, parent_link,)
            except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
                self._broadcaster.sendTransform( (0, 0, 0), (0, 0, 0, 1.0), rospy.Time.now(),  mesh_link, parent_link )
                print("Resetting TF")
                continue

            # Add/Update mesh
            marker = Marker()
            marker = to_triangle_marker_msg(gen.vertices, gen.faces, mesh_link, seq, rospy.Time.now())
            marker.header.stamp = rospy.Time.now()

            # Save mesh if button clicked
            if self._util.save_file == True:
                # Rotate the vertices
                rotation_matrix = Rotation.from_quat(rot)
                gen.vertices = (rotation_matrix.apply(gen.vertices))

                # Translate the vertices - the 1D vector is broadcast
                # across the matrix, added to every coordinate
                gen.vertices += np.array(trans)

                # Save to file
                exporter.mesh_to_stl(gen.vertices, gen.faces, filename)
                self._util.save_file = False
                print("Exported mesh as " + filename)
                self._result.results_path = filename
                self._result.success = True
                self._as.set_succeeded(self._result)
                finished = True


            # Publish the mesh
            self._pub_marker.publish(marker)

        # Hide the controls, but leave the mesh showing
        self._server.clear()
        self._server.applyChanges()





if __name__ == '__main__':
    # Initialize node, publishers, and interactive marker server
    rospy.init_node('interactive_ellipsoid_node')
    server = EllipsoidAction(rospy.get_name())
    rospy.spin()

